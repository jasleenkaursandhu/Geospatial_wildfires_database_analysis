version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: wildfire_loadbalancer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api1
      - api2
      - api3
    networks:
      - wildfire_network
    restart: unless-stopped

  api1:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: wildfire_api_1
    environment:
      - DATABASE_URL=postgresql://wildfire_user:secure_password@postgres:5432/wildfire_db
      - REDIS_URL=redis://redis:6379/0
      - API_PORT=5000
      - INSTANCE_ID=api1
    depends_on:
      - postgres
      - redis
    networks:
      - wildfire_network
    volumes:
      - ./data:/app/data
    restart: unless-stopped

  api2:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: wildfire_api_2
    environment:
      - DATABASE_URL=postgresql://wildfire_user:secure_password@postgres:5432/wildfire_db
      - REDIS_URL=redis://redis:6379/0
      - API_PORT=5000
      - INSTANCE_ID=api2
    depends_on:
      - postgres
      - redis
    networks:
      - wildfire_network
    volumes:
      - ./data:/app/data
    restart: unless-stopped

  api3:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: wildfire_api_3
    environment:
      - DATABASE_URL=postgresql://wildfire_user:secure_password@postgres:5432/wildfire_db
      - REDIS_URL=redis://redis:6379/0
      - API_PORT=5000
      - INSTANCE_ID=api3
    depends_on:
      - postgres
      - redis
    networks:
      - wildfire_network
    volumes:
      - ./data:/app/data
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: wildfire_postgres
    environment:
      POSTGRES_DB: wildfire_db
      POSTGRES_USER: wildfire_user
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - wildfire_network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: wildfire_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: wildfire_historical
      MYSQL_USER: historical_user
      MYSQL_PASSWORD: historical_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/mysql_init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - wildfire_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: wildfire_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wildfire_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: wildfire_worker
    environment:
      - DATABASE_URL=postgresql://wildfire_user:secure_password@postgres:5432/wildfire_db
      - REDIS_URL=redis://redis:6379/0
      - MYSQL_URL=mysql://historical_user:historical_password@mysql:3306/wildfire_historical
    depends_on:
      - postgres
      - mysql
      - redis
    networks:
      - wildfire_network
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wildfire_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost/api
    depends_on:
      - nginx
    networks:
      - wildfire_network
    restart: unless-stopped

networks:
  wildfire_network:
    driver: bridge

volumes:
  postgres_data:
  mysql_data:
  redis_data: